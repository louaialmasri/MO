{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/louai/Desktop/Louai/MO/my-booking-app/services/api.ts"],"sourcesContent":["import axios from 'axios'\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000/api', // Anpassen an dein Backend\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n})\r\n\r\ntype User = {\r\n  id: number;\r\n  email: string;\r\n  password: string;\r\n  role: 'user' | 'admin';\r\n};\r\n\r\ntype Service = {\r\n  id: number;\r\n  name: string;\r\n};\r\n\r\ntype Booking = {\r\n  id: number;\r\n  user: string; // E-Mail oder ID\r\n  serviceId: number;\r\n  dateTime: string;\r\n};\r\n\r\n// Dummy-DB\r\nexport const services: Service[] = [\r\n  { id: 1, name: 'Haarschnitt' },\r\n  { id: 2, name: 'Bart trimmen' },\r\n  { id: 3, name: 'Massage' },\r\n];\r\n\r\nlet bookings: Booking[] = [];\r\nlet bookingIdCounter = 1;\r\n\r\n// Buchung erstellen\r\nexport function createBooking(user: string, serviceId: number, dateTime: string): Booking {\r\n  const booking = {\r\n    id: bookingIdCounter++,\r\n    user,\r\n    serviceId,\r\n    dateTime,\r\n  };\r\n  bookings.push(booking);\r\n  return booking;\r\n}\r\n\r\n// Alle Buchungen eines Users\r\nexport function getUserBookings(user: string): Booking[] {\r\n  return bookings.filter((b) => b.user === user);\r\n}\r\n\r\nlet users: User[] = []; // unser Fake-DB\r\n\r\nlet userIdCounter = 1;\r\n\r\nexport function registerUser(email: string, password: string): { success: boolean; message: string } {\r\n  const exists = users.find(user => user.email === email);\r\n  if (exists) {\r\n    return { success: false, message: 'User already exists' };\r\n  }\r\n  const role = email === 'admin@booking.com' ? 'admin' : 'user' // Admin-Erkennung\r\n  users.push({ id: userIdCounter++, email, password, role })\r\n    return { success: true, message: 'User registered successfully' };\r\n}\r\n\r\nexport function loginUser(email: string, password: string): { success: boolean; message: string } {\r\n  const user = users.find(u => u.email === email && u.password === password);\r\n  if (!user) {\r\n    return { success: false, message: 'Invalid credentials' };\r\n  }\r\n  return { success: true, message: 'Login successful' };\r\n}\r\n\r\nexport function getUserByEmail(email: string): User | undefined {\r\n  return users.find(user => user.email === email)\r\n}\r\n\r\nexport function getAllBookings(): Booking[] {\r\n  return bookings\r\n}\r\n\r\nexport default api\r\n"],"names":[],"mappings":";;;;;;;;;;AAAA;;AAEA,MAAM,MAAM,wIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACvB,SAAS;IACT,SAAS;QACP,gBAAgB;IAClB;AACF;AAsBO,MAAM,WAAsB;IACjC;QAAE,IAAI;QAAG,MAAM;IAAc;IAC7B;QAAE,IAAI;QAAG,MAAM;IAAe;IAC9B;QAAE,IAAI;QAAG,MAAM;IAAU;CAC1B;AAED,IAAI,WAAsB,EAAE;AAC5B,IAAI,mBAAmB;AAGhB,SAAS,cAAc,IAAY,EAAE,SAAiB,EAAE,QAAgB;IAC7E,MAAM,UAAU;QACd,IAAI;QACJ;QACA;QACA;IACF;IACA,SAAS,IAAI,CAAC;IACd,OAAO;AACT;AAGO,SAAS,gBAAgB,IAAY;IAC1C,OAAO,SAAS,MAAM,CAAC,CAAC,IAAM,EAAE,IAAI,KAAK;AAC3C;AAEA,IAAI,QAAgB,EAAE,EAAE,gBAAgB;AAExC,IAAI,gBAAgB;AAEb,SAAS,aAAa,KAAa,EAAE,QAAgB;IAC1D,MAAM,SAAS,MAAM,IAAI,CAAC,CAAA,OAAQ,KAAK,KAAK,KAAK;IACjD,IAAI,QAAQ;QACV,OAAO;YAAE,SAAS;YAAO,SAAS;QAAsB;IAC1D;IACA,MAAM,OAAO,UAAU,sBAAsB,UAAU,OAAO,kBAAkB;;IAChF,MAAM,IAAI,CAAC;QAAE,IAAI;QAAiB;QAAO;QAAU;IAAK;IACtD,OAAO;QAAE,SAAS;QAAM,SAAS;IAA+B;AACpE;AAEO,SAAS,UAAU,KAAa,EAAE,QAAgB;IACvD,MAAM,OAAO,MAAM,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,KAAK,SAAS,EAAE,QAAQ,KAAK;IACjE,IAAI,CAAC,MAAM;QACT,OAAO;YAAE,SAAS;YAAO,SAAS;QAAsB;IAC1D;IACA,OAAO;QAAE,SAAS;QAAM,SAAS;IAAmB;AACtD;AAEO,SAAS,eAAe,KAAa;IAC1C,OAAO,MAAM,IAAI,CAAC,CAAA,OAAQ,KAAK,KAAK,KAAK;AAC3C;AAEO,SAAS;IACd,OAAO;AACT;uCAEe","debugId":null}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/louai/Desktop/Louai/MO/my-booking-app/context/AuthContext.tsx"],"sourcesContent":["'use client'\r\n\r\nimport { createContext, useContext, useState, useEffect } from 'react'\r\nimport { getUserByEmail } from '@/services/api'\r\n\r\ninterface AuthContextType {\r\n  user: string | null\r\n  role: 'user' | 'admin' | null\r\n  login: (email: string) => void\r\n  logout: () => void\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType>({\r\n  user: null,\r\n  role: null,\r\n  login: () => {\r\n    throw new Error('login() not implemented')\r\n  },\r\n  logout: () => {\r\n    throw new Error('logout() not implemented')\r\n  },\r\n})\r\n\r\n\r\nexport const AuthProvider = ({ children }: { children: React.ReactNode }) => {\r\n  const [user, setUser] = useState<string | null>(null)\r\n  const [role, setRole] = useState<'user' | 'admin' | null>(null)\r\n\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('authUser')\r\n    if (storedUser) {\r\n      const foundUser = getUserByEmail(storedUser)\r\n      setUser(storedUser)\r\n      setRole(foundUser?.role || 'user')\r\n    }\r\n  }, [])\r\n\r\n  const login = (email: string) => {\r\n    const foundUser = getUserByEmail(email)\r\n    setUser(email)\r\n    setRole(foundUser?.role || 'user')\r\n    localStorage.setItem('authUser', email)\r\n  }\r\n  \r\n\r\n  const logout = () => {\r\n    setUser(null)\r\n    localStorage.removeItem('authUser')\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, role, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useAuth = () => useContext(AuthContext)\r\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;AAHA;;;AAYA,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAAmB;IACjD,MAAM;IACN,MAAM;IACN,OAAO;QACL,MAAM,IAAI,MAAM;IAClB;IACA,QAAQ;QACN,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,MAAM,eAAe,CAAC,EAAE,QAAQ,EAAiC;;IACtE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAChD,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAA2B;IAE1D,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,MAAM,aAAa,aAAa,OAAO,CAAC;YACxC,IAAI,YAAY;gBACd,MAAM,YAAY,CAAA,GAAA,kHAAA,CAAA,iBAAc,AAAD,EAAE;gBACjC,QAAQ;gBACR,QAAQ,WAAW,QAAQ;YAC7B;QACF;iCAAG,EAAE;IAEL,MAAM,QAAQ,CAAC;QACb,MAAM,YAAY,CAAA,GAAA,kHAAA,CAAA,iBAAc,AAAD,EAAE;QACjC,QAAQ;QACR,QAAQ,WAAW,QAAQ;QAC3B,aAAa,OAAO,CAAC,YAAY;IACnC;IAGA,MAAM,SAAS;QACb,QAAQ;QACR,aAAa,UAAU,CAAC;IAC1B;IAEA,qBACE,6LAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAM;YAAM;YAAO;QAAO;kBACtD;;;;;;AAGP;GA/Ba;KAAA;AAiCN,MAAM,UAAU;;IAAM,OAAA,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;AAAW;IAAtC","debugId":null}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/louai/Desktop/Louai/MO/my-booking-app/app/providers.tsx"],"sourcesContent":["'use client'\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\r\nimport { AuthProvider } from '@/context/AuthContext'\r\n\r\nconst queryClient = new QueryClient()\r\n\r\nexport default function Providers({ children }: { children: React.ReactNode }) {\r\n  return (\r\n    <AuthProvider>\r\n      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\r\n    </AuthProvider>\r\n  )\r\n}\r\n"],"names":[],"mappings":";;;;AACA;AAAA;AACA;AAFA;;;;AAIA,MAAM,cAAc,IAAI,gLAAA,CAAA,cAAW;AAEpB,SAAS,UAAU,EAAE,QAAQ,EAAiC;IAC3E,qBACE,6LAAC,0HAAA,CAAA,eAAY;kBACX,cAAA,6LAAC,yLAAA,CAAA,sBAAmB;YAAC,QAAQ;sBAAc;;;;;;;;;;;AAGjD;KANwB","debugId":null}}]
}