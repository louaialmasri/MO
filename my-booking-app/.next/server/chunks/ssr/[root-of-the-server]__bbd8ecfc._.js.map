{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/louai/Desktop/Louai/MO/my-booking-app/services/api.ts"],"sourcesContent":["import axios from 'axios'\r\n\r\nexport type User = {\r\n  _id: string\r\n  email: string\r\n  role: 'user' | 'admin'\r\n}\r\n\r\nexport type Service = {\r\n  _id: string\r\n  name: string\r\n  duration?: number // Dauer in Minuten\r\n}\r\n\r\nexport type Booking = {\r\n  _id: string\r\n  user: string\r\n  serviceId: string\r\n  dateTime: string\r\n}\r\n\r\nexport type StaffBooking  = {\r\n  _id: string\r\n  user: {\r\n    email: string\r\n  }\r\n  service: {\r\n    _id: string\r\n    name: string\r\n    duration?: number\r\n  }\r\n  dateTime: string\r\n}\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n})\r\n\r\n// Token automatisch mitschicken\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token')\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`\r\n  }\r\n  return config\r\n})\r\n\r\n// SERVICE API\r\n\r\nexport async function fetchServices(): Promise<Service[]> {\r\n  const res = await api.get('/services')\r\n  return res.data.services\r\n}\r\n\r\nexport async function createService(name: string, duration: number, token: string) {\r\n  const res = await api.post('/services', { name, duration }, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`\r\n    }\r\n  })\r\n  return res.data\r\n}\r\n\r\nexport async function deleteServiceById(id: string, token: string) {\r\n  const res = await api.delete(`/services/${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`\r\n    }\r\n  })\r\n  return res.data\r\n}\r\n\r\nexport async function updateServiceById(id: string, body: { name?: string; duration?: number }, token: string) {\r\n  const res = await api.patch(`/services/${id}`, body, {\r\n    headers: { Authorization: `Bearer ${token}` }\r\n  })\r\n  return res.data.service\r\n}\r\n\r\n\r\n// BOOKING API\r\n\r\nexport async function createBooking(serviceId: string, dateTime: string, staffId: string, token: string) {\r\n  const res = await api.post('/bookings', {\r\n    serviceId,\r\n    dateTime,\r\n    staffId,\r\n  }, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`\r\n    }\r\n  })\r\n  return res.data\r\n}\r\n\r\nexport async function getUserBookings(token: string): Promise<Booking[]> {\r\n  const res = await api.get('/bookings/user', {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`\r\n    }\r\n  })\r\n  return res.data.bookings\r\n}\r\n\r\nexport async function getAllBookings(token: string): Promise<Booking[]> {\r\n  const res = await api.get('/bookings/all', {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`\r\n    }\r\n  })\r\n  return res.data.bookings\r\n}\r\n\r\nexport async function deleteBooking(id: string, token: string) {\r\n  const res = await api.delete(`/bookings/${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`\r\n    }\r\n  })\r\n  return res.data\r\n}\r\n\r\n// AUTH API\r\n\r\nexport async function login(email: string, password: string) {\r\n  const res = await api.post('/login', { email, password })\r\n  return res.data // { token, user: { email, role } }\r\n}\r\n\r\nexport async function register(\r\n  email: string,\r\n  password: string,\r\n  name?: string,\r\n  address?: string,\r\n  phone?: string,\r\n  role: 'user' | 'staff' | 'admin' = 'user'\r\n) {\r\n  const res = await api.post('/register', {\r\n    email,\r\n    password,\r\n    name,\r\n    address,\r\n    phone,\r\n    role,\r\n  });\r\n  return res.data;\r\n}\r\n\r\n// ➡ Alle Mitarbeiter abrufen\r\nexport async function fetchStaff(): Promise<User[]> {\r\n  const res = await api.get('/users/staff') \r\n  return res.data.users\r\n}\r\n\r\n// ➡ Buchungen für Mitarbeiter abrufen\r\nexport async function getStaffBookings(token: string): Promise<StaffBooking[]> {\r\n  const res = await api.get('/bookings/staff', {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`\r\n    }\r\n  })\r\n  return res.data.bookings\r\n}\r\n\r\n// ➡ Alle Nutzer abrufen\r\nexport async function fetchAllUsers(token: string) {\r\n  const res = await api.get('/users', {\r\n    headers: { Authorization: `Bearer ${token}` }\r\n  })\r\n  return res.data.users\r\n}\r\n\r\n// ➡ Mitarbeiterrolle aktualisieren\r\nexport async function updateUserRole(userId: string, role: string, token: string) {\r\n  const res = await api.patch(`/users/${userId}/role`, { role }, {\r\n    headers: { Authorization: `Bearer ${token}` }\r\n  })\r\n  return res.data.user\r\n}\r\n\r\n// ➡ Buchungen bearbeiten\r\nexport async function updateBooking(\r\n  id: string,\r\n  data: { serviceId?: string; dateTime?: string, staffId?: string },\r\n  token: string\r\n) {\r\n  const res = await api.patch(`/bookings/bookings/${id}`, data, {\r\n    headers: { Authorization: `Bearer ${token}` }\r\n  })\r\n  return res.data.booking\r\n}\r\n\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/app/admin/admin.module.css [app-ssr] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"bookingItem\": \"admin-module__aXBbkG__bookingItem\",\n  \"bookingList\": \"admin-module__aXBbkG__bookingList\",\n  \"container\": \"admin-module__aXBbkG__container\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/louai/Desktop/Louai/MO/my-booking-app/app/admin/page.tsx"],"sourcesContent":["'use client'\r\n\r\nimport { useAuth } from '@/context/AuthContext'\r\nimport { useRouter } from 'next/navigation'\r\nimport { useEffect, useMemo, useState } from 'react'\r\nimport {\r\n  fetchServices,\r\n  deleteServiceById,\r\n  getAllBookings,\r\n  deleteBooking,\r\n  fetchAllUsers,\r\n  updateUserRole,\r\n  register as registerUser,\r\n  updateBooking,\r\n} from '@/services/api'\r\nimport styles from './admin.module.css'\r\nimport dynamic from 'next/dynamic'\r\nimport { motion } from 'framer-motion'\r\nimport { useForm } from 'react-hook-form'\r\nimport { Box, Button, Chip, Stack, Dialog, DialogTitle, DialogContent,\r\n  DialogActions, TextField, MenuItem, Typography } from '@mui/material'\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\nimport type { Service } from '@/services/api'\r\nimport dayjs from 'dayjs'\r\nimport AdminBreadcrumbs from '@/components/AdminBreadcrumbs'\r\n\r\ntype Booking = {\r\n  _id: string\r\n  user: string | User\r\n  serviceId: string\r\n  dateTime: string\r\n}\r\n\r\ntype User = {\r\n  _id: string\r\n  email: string\r\n  role: 'user' | 'admin' | 'staff'\r\n  name?: string\r\n  address?: string\r\n  phone?: string\r\n}\r\n\r\ntype StaffLite = { _id: string; email: string; name?: string }\r\n\r\ntype BookingFull = {\r\n  _id: string\r\n  user: string | User\r\n  staff?: StaffLite\r\n  service?: { _id: string; name: string; duration?: number }\r\n  serviceId?: string\r\n  dateTime: string\r\n}\r\n\r\n\r\nfunction formatDateTimeLocal(date: Date): string {\r\n  const tzOffset = date.getTimezoneOffset() * 60000\r\n  const localISOTime = new Date(date.getTime() - tzOffset).toISOString().slice(0, 16)\r\n  return localISOTime\r\n}\r\n\r\n\r\nfunction AdminPage() {\r\n  const { user, token } = useAuth()\r\n  const router = useRouter()\r\n  const [bookings, setBookings] = useState<BookingFull[]>([])\r\n  const [services, setServices] = useState<Service[]>([])\r\n  const [users, setUsers] = useState<User[]>([])\r\n  const [successMessage, setSuccessMessage] = useState(false)\r\n  const [showUserDialog, setShowUserDialog] = useState(false)\r\n  const [userRoleFilter, setUserRoleFilter] = useState<'all' | 'user' | 'staff' | 'admin'>('all')\r\n  const [selectedBooking, setSelectedBooking] = useState<Booking | null>(null)\r\n  const [editMode, setEditMode] = useState(false)\r\n  const [editForm, setEditForm] = useState({ serviceId: '', dateTime: '' })\r\n  const [openEvent, setOpenEvent] = useState(false)\r\n  const [activeBooking, setActiveBooking] = useState<BookingFull | null>(null)\r\n  const [edit, setEdit] = useState<{dateTime: string; serviceId: string; staffId: string}>({\r\n    dateTime: '', serviceId: '', staffId: ''\r\n  })\r\n  const [editOpen, setEditOpen] = useState(false)\r\n  const [editing, setEditing] = useState<{ _id: string; name: string; duration?: number } | null>(null)\r\n  const [toast, setToast] = useState<{open: boolean; msg: string; sev: 'success'|'error'}>({open:false,msg:'',sev:'success'})\r\n\r\n  const openDialogFor = (bookingId: string) => {\r\n    const b = bookings.find(x => x._id === bookingId) as BookingFull | undefined\r\n    if (!b) return\r\n    setActiveBooking(b)\r\n    setEdit({\r\n      dateTime: dayjs(b.dateTime).format('YYYY-MM-DDTHH:mm'),\r\n      serviceId: b.service?._id || b.serviceId || '',\r\n      staffId: b.staff?._id || ''\r\n    })\r\n    setOpenEvent(true)\r\n  }\r\n  const closeDialog = () => { setOpenEvent(false); setActiveBooking(null) }\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm<{ name: string; duration: number }>()\r\n\r\n  useEffect(() => {\r\n    if (!user || user.role !== 'admin') {\r\n      router.push('/login')\r\n      return\r\n    }\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const all = await getAllBookings(token!)\r\n        setBookings(all)\r\n        await loadServices()\r\n        await fetchUsers()\r\n      } catch (err) {\r\n        console.error('Fehler beim Laden der Buchungen oder Nutzer:', err)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [user, token])\r\n\r\n  const loadServices = async () => {\r\n    try {\r\n      const data = await fetchServices()\r\n      setServices(data)\r\n    } catch (err) {\r\n      console.error('Fehler beim Laden der Services:', err)\r\n    }\r\n  }\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      const data = await fetchAllUsers(token!)\r\n      setUsers(data)\r\n    } catch (err) {\r\n      console.error('Fehler beim Laden der Nutzer:', err)\r\n    }\r\n  }\r\n\r\n  const handleDeleteService = async (id: string) => {\r\n    try {\r\n      await deleteServiceById(id, token!)\r\n      loadServices()\r\n    } catch (err) {\r\n      console.error('Fehler beim Löschen:', err)\r\n    }\r\n  }\r\n\r\n  const handleCancel = async (bookingId: string) => {\r\n    try {\r\n      const success = await deleteBooking(bookingId, token!)\r\n      if (success) {\r\n        setBookings(prev => prev.filter(b => b._id !== bookingId))\r\n      }\r\n    } catch (err) {\r\n      console.error('Fehler beim Stornieren:', err)\r\n    }\r\n  }\r\n\r\n  const handleMakeStaff = async (userId: string) => {\r\n    try {\r\n      await updateUserRole(userId, 'staff', token!)\r\n      fetchUsers()\r\n    } catch (err) {\r\n      console.error('Fehler beim Ändern der Rolle:', err)\r\n    }\r\n  }\r\n\r\n  const [openDialog, setOpenDialog] = useState(false)\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    address: '',\r\n    phone: '',\r\n    email: '',\r\n    password: '',\r\n    role: 'user',\r\n  })\r\n\r\n  const handleOpenDialog = () => setOpenDialog(true)\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false)\r\n    setFormData({\r\n      name: '',\r\n      address: '',\r\n      phone: '',\r\n      email: '',\r\n      password: '',\r\n      role: 'user',\r\n    })\r\n  }\r\n\r\n  const handleCreateUser = async () => {\r\n    try {\r\n      await registerUser(\r\n        formData.email,\r\n        formData.password,\r\n        formData.name,\r\n        formData.address,\r\n        formData.phone,\r\n        formData.role as 'user' | 'staff' | 'admin'\r\n      )\r\n      alert('Benutzer erfolgreich erstellt!')\r\n      handleCloseDialog()\r\n      fetchUsers()\r\n    } catch (err) {\r\n      console.error('Fehler beim Erstellen des Benutzers:', err)\r\n      alert('Fehler beim Erstellen des Benutzers.')\r\n    }\r\n  }\r\n\r\n  const calendarEvents = bookings\r\n  .filter(b => typeof b.user === 'object') // Safety\r\n  .map((b) => {\r\n    const service = services.find(s => s._id === b.serviceId)\r\n    const start = new Date(b.dateTime)\r\n    const duration = (service?.duration ?? 30) * 60000\r\n    const end = new Date(start.getTime() + duration)\r\n\r\n    return {\r\n      id: b._id,\r\n      title: `${service?.name} – ${(b.user as any)?.email ?? 'Unbekannt'} (Staff: ${(b as any).staff?.email ?? '???'})`,\r\n      start: start.toISOString(),\r\n      end: end.toISOString(),\r\n    }\r\n  })\r\n\r\n  // Beim Klick auf einen Termin im Kalender\r\n  const handleBookingClick = (booking: Booking) => {\r\n    setSelectedBooking(booking)\r\n    setEditForm({\r\n      serviceId: booking.serviceId || (services[0]?._id ?? ''),\r\n      dateTime: formatDateTimeLocal(new Date(booking.dateTime)),\r\n    })\r\n    setEditMode(false)\r\n  }\r\n\r\n  const handleEditSave = async () => {\r\n    if (!selectedBooking) return\r\n    try {\r\n      // updateBooking muss im Admin-API-Service existieren!\r\n      await updateBooking(selectedBooking._id, {\r\n        serviceId: editForm.serviceId,\r\n        dateTime: editForm.dateTime,\r\n      }, token!)\r\n      setBookings(prev =>\r\n        prev.map(b =>\r\n          b._id === selectedBooking._id\r\n            ? {\r\n                ...b,\r\n                serviceId: editForm.serviceId,\r\n                dateTime: editForm.dateTime,\r\n              }\r\n            : b\r\n        )\r\n      )\r\n      setSelectedBooking(null)\r\n      setEditMode(false)\r\n    } catch (err) {\r\n      alert('Fehler beim Speichern der Änderungen.')\r\n    }\r\n  }\r\n\r\n\r\n  // Gefilterte User-Liste\r\n  const filteredUsers = userRoleFilter === 'all'\r\n    ? users\r\n    : users.filter(u => u.role === userRoleFilter)\r\n\r\n  // Datum & Sichtbarkeit\r\nconst [currentDate, setCurrentDate] = useState<Date>(new Date())\r\n\r\n// Nur Mitarbeiter (aus deiner users-Liste)\r\nconst staffUsers = users.filter(u => u.role === 'staff')\r\n\r\n// Ausgewählte Mitarbeiter (standard: alle)\r\nconst [visibleStaffIds, setVisibleStaffIds] = useState<string[]>(\r\n  staffUsers.map(s => s._id)\r\n)\r\n\r\n// Wenn sich staffUsers ändert, setze Standard neu\r\nuseEffect(() => {\r\n  setVisibleStaffIds(staffUsers.map(s => s._id))\r\n}, [users])\r\n\r\nconst staffColor = (id: string) => {\r\n  const palette = ['#3b82f6','#ef4444','#10b981','#f59e0b','#8b5cf6','#06b6d4','#ec4899','#84cc16']\r\n  const idx = Math.abs([...id].reduce((a,c)=>a+c.charCodeAt(0),0)) % palette.length\r\n  return palette[idx]\r\n}\r\n\r\n// Events je Staff vorbereiten\r\nconst eventsByStaff: Record<string, any[]> = useMemo(() => {\r\n  const map: Record<string, any[]> = {}\r\n\r\n  // Hilfsfunktion: Dauer holen (service.duration oder Fallback 30)\r\n  const getDuration = (b: BookingFull) => {\r\n    if (b.service?.duration) return b.service.duration\r\n    const s = services.find(x => x._id === (b.service?._id || b.serviceId))\r\n    return s?.duration ?? 30\r\n  }\r\n\r\n  bookings.forEach((b) => {\r\n    const staffId = b.staff?._id\r\n    if (!staffId) return // ohne staff nicht darstellbar\r\n\r\n    const start = new Date(b.dateTime)\r\n    // Nur Events des aktuellen Tages zeigen\r\n    const sameDay = (d: string) => dayjs(d).isSame(dayjs(currentDate), 'day')\r\n      if (!staffId || !sameDay(b.dateTime)) return\r\n\r\n    const duration = getDuration(b)\r\n    const end = new Date(start.getTime() + duration * 60000)\r\n\r\n    if (!map[staffId]) map[staffId] = []\r\n      map[staffId].push({\r\n      id: b._id,\r\n      title: `${b.service?.name ?? 'Service'} – ${\r\n        (typeof b.user === 'object' && b.user?.email) ? b.user.email : String(b.user)\r\n      }`,\r\n      start: start.toISOString(),\r\n      end: end.toISOString(),\r\n      color: staffColor(staffId), // <--- HIER ergänzen!\r\n    })\r\n  })\r\n\r\n    return map\r\n  }, [bookings, services, currentDate])\r\n  \r\n  return (\r\n    <>\r\n      <motion.div\r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 1 }}\r\n        exit={{ opacity: 0 }}\r\n        transition={{ duration: 0.3 }}\r\n        className={styles.container}\r\n      >\r\n        <h1>Admin Dashboard</h1>\r\n        <p>Angemeldet als: {user?.email}</p>\r\n        <h2>Kalenderübersicht</h2>\r\n          <Box maxWidth=\"900px\" margin=\"auto\" mt={5} p={2}>\r\n            <Typography variant=\"h4\" gutterBottom>\r\n              Kalender – Deine Buchungen\r\n            </Typography>\r\n            <Stack direction={{ xs: 'column', md: 'row' }} spacing={2} alignItems=\"center\" sx={{ mt: 3, mb: 2 }}>\r\n              <Stack direction=\"row\" spacing={1}>\r\n                <Button variant=\"outlined\" onClick={() => setCurrentDate(dayjs(currentDate).subtract(1, 'day').toDate())}>◀</Button>\r\n                <Button variant=\"outlined\" onClick={() => setCurrentDate(new Date())}>Heute</Button>\r\n                <Button variant=\"outlined\" onClick={() => setCurrentDate(dayjs(currentDate).add(1, 'day').toDate())}>▶</Button>\r\n              </Stack>\r\n\r\n              <Typography sx={{ fontWeight: 700 }}>\r\n                {dayjs(currentDate).format('ddd, DD. MMM YYYY')}\r\n              </Typography>\r\n\r\n              <Stack direction=\"row\" spacing={1} sx={{ flexWrap: 'wrap' }}>\r\n                {staffUsers.map(s => {\r\n                  const active = visibleStaffIds.includes(s._id)\r\n                  return (\r\n                    <Chip\r\n                      key={s._id}\r\n                      label={s.name || s.email}\r\n                      color={active ? 'primary' : 'default'}\r\n                      variant={active ? 'filled' : 'outlined'}\r\n                      onClick={() => {\r\n                        setVisibleStaffIds(prev =>\r\n                          active ? prev.filter(id => id !== s._id) : [...prev, s._id]\r\n                        )\r\n                      }}\r\n                    />\r\n                  )\r\n                })}\r\n              </Stack>\r\n        </Stack>\r\n            <Box\r\n              sx={{\r\n                display: 'grid',\r\n                gridAutoFlow: 'column',\r\n                gridAutoColumns: { xs: '100%', md: '420px' }, // Breitere Spalten\r\n                gap: 2,\r\n                overflowX: 'auto',\r\n                pb: 2,\r\n              }}\r\n            >\r\n              {staffUsers.filter(s => visibleStaffIds.includes(s._id)).map((s) => (\r\n                <Box key={s._id} sx={{ p: 2, bgcolor: 'white', borderRadius: 3, boxShadow: 1 }}>\r\n                  <Typography sx={{ fontWeight: 700, mb: 1 }}>{s.name || s.email}</Typography>\r\n                  <FullCalendar\r\n                    key={`${dayjs(currentDate).format('YYYY-MM-DD')}-${s._id}`}\r\n                    plugins={[timeGridPlugin, interactionPlugin]}\r\n                    initialView=\"timeGridDay\"\r\n                    locale=\"de\"\r\n                    headerToolbar={false}\r\n                    height=\"auto\"\r\n                    allDaySlot={false}\r\n                    slotMinTime=\"08:00:00\"\r\n                    slotMaxTime=\"20:00:00\"\r\n                    nowIndicator\r\n                    initialDate={currentDate}\r\n                    events={eventsByStaff[s._id] ?? []}\r\n                    eventClick={(info) => openDialogFor(info.event.id)}\r\n                    editable\r\n                    eventDrop={async (info) => {\r\n                      try {\r\n                        await updateBooking(info.event.id, { dateTime: info.event.start?.toISOString()! }, token!)\r\n                        setBookings(prev => prev.map(b => b._id === info.event.id ? { ...b, dateTime: info.event.start!.toISOString() } : b))\r\n                      } catch (e) {\r\n                        info.revert()\r\n                      }\r\n                    }}\r\n                  />\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n          </Box>\r\n          {/* Buchungsdetails- und Bearbeiten-Dialog */}\r\n      <Dialog open={!!selectedBooking} onClose={() => { setSelectedBooking(null); setEditMode(false) }}>\r\n        <DialogTitle>\r\n          {editMode ? 'Buchung bearbeiten' : 'Buchungsdetails'}\r\n        </DialogTitle>\r\n        <DialogContent sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n          {editMode ? (\r\n            <>\r\n              <TextField\r\n                select\r\n                label=\"Service\"\r\n                value={editForm.serviceId || ''}\r\n                onChange={e => setEditForm(f => ({ ...f, serviceId: e.target.value }))}\r\n                fullWidth\r\n              >\r\n                {services.map(s => (\r\n                  <MenuItem key={s._id} value={s._id}>{s.name}</MenuItem>\r\n                ))}\r\n              </TextField>\r\n              <TextField\r\n                label=\"Datum & Uhrzeit\"\r\n                type=\"datetime-local\"\r\n                value={editForm.dateTime}\r\n                onChange={e => setEditForm(f => ({ ...f, dateTime: e.target.value }))}\r\n                fullWidth\r\n                InputLabelProps={{ shrink: true }}\r\n              />\r\n            </>\r\n          ) : (\r\n            <>\r\n              {selectedBooking && (\r\n                <>\r\n                  <Typography gutterBottom>\r\n                    <strong>Service:</strong> {services.find(s => s._id === selectedBooking.serviceId)?.name || 'Unbekannt'}\r\n                  </Typography>\r\n                  <Typography gutterBottom>\r\n                    <strong>Kunde:</strong> {\r\n                      typeof selectedBooking.user === 'object'\r\n                        ? selectedBooking.user.email\r\n                        : users.find(u => u._id === selectedBooking.user)?.email || 'Unbekannt'\r\n                    }\r\n                  </Typography>\r\n                  <Typography gutterBottom>\r\n                    <strong>Datum:</strong> {new Date(selectedBooking.dateTime).toLocaleString('de-DE')}\r\n                  </Typography>\r\n                </>\r\n              )}\r\n            </>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          {editMode ? (\r\n            <>\r\n              <Button onClick={() => setEditMode(false)}>Abbrechen</Button>\r\n              <Button variant=\"contained\" onClick={handleEditSave}>Speichern</Button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Button onClick={() => setEditMode(true)} variant=\"contained\" color=\"primary\">\r\n                Bearbeiten\r\n              </Button>\r\n              <Button onClick={() => setSelectedBooking(null)}>Schließen</Button>\r\n            </>\r\n          )}\r\n        </DialogActions>\r\n      </Dialog>\r\n      <Dialog open={openEvent} onClose={closeDialog} fullWidth maxWidth=\"sm\">\r\n        <DialogTitle>Buchung bearbeiten</DialogTitle>\r\n        <DialogContent sx={{ display:'flex', flexDirection:'column', gap:2, pt:2 }}>\r\n          {activeBooking && (\r\n            <>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Kunde: {(typeof activeBooking.user === 'object' && activeBooking.user?.email) ? activeBooking.user.email : String(activeBooking.user)}\r\n              </Typography>\r\n\r\n              <TextField\r\n                label=\"Datum & Uhrzeit\"\r\n                type=\"datetime-local\"\r\n                value={edit.dateTime}\r\n                onChange={(e)=> setEdit({...edit, dateTime: e.target.value})}\r\n                InputLabelProps={{ shrink:true }}\r\n              />\r\n\r\n              <TextField\r\n                select\r\n                label=\"Service\"\r\n                value={edit.serviceId}\r\n                onChange={(e)=> setEdit({...edit, serviceId: e.target.value})}\r\n              >\r\n                {services.map(s => (\r\n                  <MenuItem key={s._id} value={s._id}>{s.name}</MenuItem>\r\n                ))}\r\n              </TextField>\r\n\r\n              <TextField\r\n                select\r\n                label=\"Mitarbeiter\"\r\n                value={edit.staffId}\r\n                onChange={(e)=> setEdit({...edit, staffId: e.target.value})}\r\n              >\r\n                {staffUsers.map(s => (\r\n                  <MenuItem key={s._id} value={s._id}>{s.name || s.email}</MenuItem>\r\n                ))}\r\n              </TextField>\r\n            </>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={closeDialog}>Abbrechen</Button>\r\n          {activeBooking && (\r\n            <>\r\n              <Button\r\n                color=\"error\"\r\n                onClick={async () => {\r\n                  try {\r\n                    await deleteBooking(activeBooking._id, token!)\r\n                    setBookings(prev => prev.filter(b => b._id !== activeBooking._id))\r\n                    closeDialog()\r\n                  } catch {}\r\n                }}\r\n              >\r\n                Löschen\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={async ()=> {\r\n                  if (!activeBooking) return\r\n                  try {\r\n                    await updateBooking(activeBooking._id, {\r\n                      dateTime: new Date(edit.dateTime).toISOString(),\r\n                      serviceId: edit.serviceId,\r\n                      staffId: edit.staffId,\r\n                    }, token!)\r\n                    // lokal aktualisieren\r\n                    setBookings(prev => prev.map(b =>\r\n                      b._id === activeBooking._id\r\n                        ? { ...b, dateTime: new Date(edit.dateTime).toISOString(),\r\n                            service: { ...(b as any).service, _id: edit.serviceId },\r\n                            staff: { ...(b as any).staff, _id: edit.staffId } }\r\n                        : b\r\n                    ))\r\n                    closeDialog()\r\n                  } catch {}\r\n                }}\r\n              >\r\n                Speichern\r\n              </Button>\r\n            </>\r\n          )}\r\n        </DialogActions>\r\n      </Dialog>\r\n    </motion.div>\r\n  </>\r\n  )\r\n}\r\n\r\nexport default dynamic(() => Promise.resolve(AdminPage), { ssr: false })"],"names":[],"mappings":"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","debugId":null}}]
}